'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _slicedToArray2 = require('babel-runtime/helpers/slicedToArray');

var _slicedToArray3 = _interopRequireDefault(_slicedToArray2);

exports.default = createHttpClient;

var _version = require('../version');

var _version2 = _interopRequireDefault(_version);

var _qs = require('qs');

var _qs2 = _interopRequireDefault(_qs);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Create pre configured axios instance
 * @private
 * @param {Object} axios - Axios library
 * @param {Object} HTTPClientParams - Initialization parameters for the HTTP client
 * @prop {string} space - Space ID
 * @prop {string} accessToken - Access Token
 * @prop {boolean=} insecure - If we should use http instead
 * @prop {string=} host - Alternate host
 * @prop {Object=} agent - HTTP agent for node
 * @prop {Object=} headers - Additional headers
 * @return {Object} Initialized axios instance
 */
function createHttpClient(axios, _ref) {
  var space = _ref.space;
  var accessToken = _ref.accessToken;
  var insecure = _ref.insecure;
  var host = _ref.host;
  var agent = _ref.agent;
  var headers = _ref.headers;

  var _ref2 = host && host.split(':') || [];

  var _ref3 = (0, _slicedToArray3.default)(_ref2, 2);

  var hostname = _ref3[0];
  var port = _ref3[1];

  hostname = hostname || 'cdn.contentful.com';
  port = port || (insecure ? 80 : 443);
  headers = headers || {};
  headers['Authorization'] = 'Bearer ' + accessToken;
  headers['Content-Type'] = 'application/vnd.contentful.delivery.v1+json';
  headers['X-Contentful-User-Agent'] = 'contentful.js/' + _version2.default;

  if (process && process.release && process.release.name === 'node') {
    headers['user-agent'] = 'node.js/' + process.version;
  }

  return axios.create({
    baseURL: (insecure ? 'http' : 'https') + '://' + hostname + ':' + port + '/spaces/' + space + '/',
    headers: headers,
    agent: agent,
    paramsSerializer: _qs2.default.stringify
  });
}